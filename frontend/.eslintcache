[{"/Users/yaathavi/Desktop/Project/Pomodoro/frontend/src/index.js":"1","/Users/yaathavi/Desktop/Project/Pomodoro/frontend/src/App.js":"2","/Users/yaathavi/Desktop/Project/Pomodoro/frontend/src/Timer.js":"3","/Users/yaathavi/Desktop/Project/Pomodoro/frontend/src/Tasks.js":"4"},{"size":199,"mtime":1611652093532,"results":"5","hashOfConfig":"6"},{"size":577,"mtime":1611652089715,"results":"7","hashOfConfig":"6"},{"size":6104,"mtime":1611652092022,"results":"8","hashOfConfig":"6"},{"size":2707,"mtime":1613545495644,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1g7yo8f",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/yaathavi/Desktop/Project/Pomodoro/frontend/src/index.js",[],["20","21"],"/Users/yaathavi/Desktop/Project/Pomodoro/frontend/src/App.js",[],"/Users/yaathavi/Desktop/Project/Pomodoro/frontend/src/Timer.js",["22","23","24","25"],"import React, { Component } from 'react';\nimport './App.css';\nimport Swal from 'sweetalert2'\nimport Helmet from 'react-helmet'\n\nexport default class Timer extends Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            time: 1*1000*60,\n            start: 0,\n            isOn: false,\n            onBreak: false,\n            url: \"https://webgradients.com/public/webgradients_png/022%20Morpheus%20Den.png\",\n            defaultTime: 1*1000*60\n        }        \n    }\n      \n    msToTime = (s) => {\n        var ms = s % 1000;\n        s = (s - ms) / 1000;\n        var secs = s % 60;\n        s = (s - secs) / 60;\n        var mins = s % 60;\n        var hrs = (s - mins) / 60;\n      \n        if (secs<10) {\n            secs = \"0\" + secs\n        }\n        \n        return mins + ':' + secs\n      }\n\n    handle = () => {\n        clearInterval(this.timer);\n        this.setState({isOn: false, defaultTime: this.state.time})\n        \n        Swal.fire({\n            title: 'Do you want to take a 5-min break now?',\n            text: \"Or you can continue working!\",\n            imageUrl: \"https://media.tenor.com/images/dc3a69fd45e89213eb1cd6a740213336/tenor.gif\",\n            imageWidth: \"30vh\",\n            imageHeight: \"20vh\",\n            imageAlt: 'Good work, Keep it up!',\n            showCancelButton: true,\n            cancelButtonText: \"No, I want to keep working!\",\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Yes, I need a break!'\n          }).then((result) => {\n            if (result.isConfirmed) {\n              Swal.fire(\n                'Enjoy your break!',\n                'Maybe grab a snack or browse through Instagram :)',\n                'success'\n              ).then (() => {\n                    this.breakTimer();\n              }) \n\n\n\n            }\n          })\n    }\n\n    handle2 = () => {\n        clearInterval(this.timer);\n        this.setState({isOn: false, defaultTime: this.state.time})\n        \n        Swal.fire({\n            title: 'Break is over! Are you ready to start working again?',\n            text: \"\",\n            imageUrl: \"https://i.pinimg.com/originals/4c/0e/a0/4c0ea0163a7bcdf118889bdf738c010d.gif\",\n            imageWidth: \"30vh\",\n            imageHeight: \"20vh\",\n            imageAlt: 'Good work, Keep it up!',\n            showCancelButton: true,\n            cancelButtonText: \"No, 5 more minutes!\",\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Yes, back to work!'\n          }).then((result) => {\n            if (result.isConfirmed) {\n              Swal.fire(\n                \"You got this! Keep grinding!\",\n                \"Don't be Busy, be Productive.\",\n                'success'\n              ).then (() => {\n                    this.setState({time: 1*60*1000, defaultTime: 1*60*1000});\n                    this.startTimer();                   \n              }) \n            } else {\n                this.breakTimer();   \n            }\n\n          })\n    }\n\n    breakTimer = () => {\n        this.setState({time: 0.5*60*1000, defaultTime: 0.5*60*1000});\n        this.afterBreak();\n    }\n\n    afterBreak = () => { \n        this.setState({\n            time: this.state.defaultTime,\n            start: Date.now(),\n             isOn: true,\n             onBreak: true,\n             url: \"https://webgradients.com/public/webgradients_png/054%20Grown%20Early.png\"\n        })          \n\n        this.timer = setInterval(() => { \n            \n            this.setState({\n                time: this.state.defaultTime - Date.now() + this.state.start\n            })  \n\n            if (this.state.time <500 && this.state.time > -500) {\n                this.handle2()\n             }\n\n        }\n        , 1);  \n    }\n\n    startTimer = () => {\n        this.setState({\n            time: this.state.defaultTime,\n            start: Date.now(),\n             isOn: true,\n             onBreak: false,\n             url: \"https://webgradients.com/public/webgradients_png/022%20Morpheus%20Den.png\",\n        })          \n        \n        this.timer = setInterval(() => { \n            \n            this.setState({\n                time: this.state.defaultTime - Date.now() + this.state.start\n            })  \n\n            if (this.state.time <500 && this.state.time > -500) {\n                this.handle()\n             }\n\n        }\n        , 1);  \n    }\n\n    stopTimer = () => {\n        this.setState({isOn: false, defaultTime: this.state.time})\n        clearInterval(this.timer);\n       \n    }\n    \n    restartTimer = () => {\n        this.setState({time: 1*60*1000, defaultTime: 1*60*1000});\n        \n    }\n    \n    \n    render() {\n        return(     \n\n                <div className=\"App-div\">\n                    <Helmet>\n                        <style>{`body {background-image: url(${this.state.url});}`}</style>\n                    </Helmet>\n                    <p style = {{fontSize: \"3vh\", color: \"#075a81\" }}> <b>  {this.state.onBreak ? \"Time to Relax!\" : \"Productive Time!\" } </b> </p>\n                    <h3 className= \"Headerr\">{this.msToTime(this.state.time)}</h3>    \n\n                <div className = \"App-div3\"> \n                \n                    <button className = \"idk\" onClick={this.startTimer} style={{ display: (!this.state.isOn && this.state.time == 1*60*1000) ? \"block\" : \"none\" }}> start </button> \n                    <button className = \"idk\" onClick={this.stopTimer} style={{ display: this.state.isOn ? \"block\" : \"none\" }}>stop</button> \n                    <button className = \"idk\"  onClick={this.restartTimer} style={{ display: (!this.state.isOn && this.state.time != 1*60*1000 && !this.state.onBreak) ? \"block\" : \"none\" }}>reset</button>\n                    <button className = \"idk\" onClick={this.state.onBreak ? this.afterBreak : this.startTimer} style={{ display: (!this.state.isOn && this.state.time != 1*60*1000  && this.state.time > 500) ? \"block\" : \"none\" }} >resume</button>\n                </div>\n            \n                </div>\n             \n\n                )\n    }\n}\n\n\n","/Users/yaathavi/Desktop/Project/Pomodoro/frontend/src/Tasks.js",["26","27","28","29","30","31"],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":26,"column":13,"nodeType":"38","messageId":"39","endLine":26,"endColumn":16},{"ruleId":"40","severity":1,"message":"41","line":175,"column":128,"nodeType":"42","messageId":"43","endLine":175,"endColumn":130},{"ruleId":"40","severity":1,"message":"44","line":177,"column":131,"nodeType":"42","messageId":"43","endLine":177,"endColumn":133},{"ruleId":"40","severity":1,"message":"44","line":178,"column":167,"nodeType":"42","messageId":"43","endLine":178,"endColumn":169},{"ruleId":"36","severity":1,"message":"45","line":3,"column":10,"nodeType":"38","messageId":"39","endLine":3,"endColumn":25},{"ruleId":"36","severity":1,"message":"46","line":4,"column":10,"nodeType":"38","messageId":"39","endLine":4,"endColumn":17},{"ruleId":"36","severity":1,"message":"47","line":4,"column":19,"nodeType":"38","messageId":"39","endLine":4,"endColumn":29},{"ruleId":"36","severity":1,"message":"48","line":5,"column":10,"nodeType":"38","messageId":"39","endLine":5,"endColumn":18},{"ruleId":"40","severity":1,"message":"41","line":32,"column":102,"nodeType":"42","messageId":"43","endLine":32,"endColumn":104},{"ruleId":"49","severity":1,"message":"50","line":54,"column":13,"nodeType":"51","endLine":54,"endColumn":42},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'hrs' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'FontAwesomeIcon' is defined but never used.","'faTrash' is defined but never used.","'faTrashAlt' is defined but never used.","'faSquare' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]